// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "wiliam.dev/product/entity"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Create(ctx context.Context, _a1 *entity.Product) (*entity.Product, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Product) *entity.Product); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Product) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *UseCase) List(ctx context.Context) ([]*entity.Product, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Product
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
